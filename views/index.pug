extends layout

block content
  body
    .container-fluid.d-flex.flex-column.vh-100.bg-light
      //- Cabecera
      .row.bg-primary.text-white.p-3
        .col
          h1.text-center.mb-0 CHATBOT
      
      //- Área de mensajes (contenedor expandible)
      .row.flex-grow-1.overflow-auto.bg-white
        .col
          ul#messages.list-unstyled.p-3
      
      //- Formulario fijo en la parte inferior
      .row.bg-light.py-3
        .col
          form.d-flex.align-items-center
            input.form-control.me-2(type="text", name="msg", placeholder="Type your message here...", required)
            button.btn.btn-primary(type="submit") Send

    //- Template para mensajes
    template#msgTemplate
      li.message.mb-3
        .d-flex
          span.role.text-muted.me-2
          p.content.m-0

  script.
    const form = document.querySelector('form')
    const input = document.querySelector('input')
    const messagesContainer = document.querySelector('#messages')
    const msgTemplate = document.querySelector('#msgTemplate')

    form.addEventListener('submit', async event => {
      event.preventDefault();
      const messageText = input.value.trim();

      if (messageText != '') {
        addMessage(messageText, 'user');
        input.value = '';

        try {
          // Enviar el mensaje al servidor usando fetch
          const response = await fetch('/send', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ msg: messageText }),
          });

          // Obtener el contenido como texto
          const data = await response.text();

          // Mostrar la respuesta del bot como HTML (enlaces clicables)
          addMessage(data, 'system', true);           
        } catch (error) {
          console.error("Hubo un problema con la solicitud:", error);
          addMessage("Estamos trabajando en ello", 'bot');
          try {
            // Repetimos el envio del mensaje para ver si soluciona el problema
            const response = await fetch('/send', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ msg: messageText }),
            });

            // Obtener el contenido como texto
            const data = await response.text();

            // Mostrar la respuesta del bot como HTML (enlaces clicables)
            addMessage(data, 'system', true);
          } catch (error) {
            console.error("Hubo un problema con la solicitud:", error);
            addMessage("Hubo un error con tu solicitud, intenta de nuevo.", 'bot');
          }
        }
      }
    });

    // Modificar addMessage para aceptar HTML
    function addMessage(text, sender, isHtml = false) {
      const clonedTemplate = msgTemplate.content.cloneNode(true)
      const roleSpan = clonedTemplate.querySelector('.role')
      const contentP = clonedTemplate.querySelector('.content')

      roleSpan.textContent = sender === 'system' ? 'System' : 'user'

      // Si es HTML (como los enlaces), lo insertamos sin escapar
      if (isHtml) {
        contentP.innerHTML = text;
      } else {
        contentP.textContent = text;
      }

      messagesContainer.appendChild(clonedTemplate)

      messagesContainer.scrollTop = messagesContainer.scrollHeight
    }

